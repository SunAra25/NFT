{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\kwangwoon\\\\KW\\\\kw_4_1\\\\capstons\\\\capstone_project\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\kwangwoon\\\\KW\\\\kw_4_1\\\\capstons\\\\capstone_project\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\kwangwoon\\\\KW\\\\kw_4_1\\\\capstons\\\\capstone_project\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\kwangwoon\\\\KW\\\\kw_4_1\\\\capstons\\\\capstone_project\\\\frontend\\\\src\\\\routes\\\\main.tsx\";\n\nimport React, { useState } from \"react\";\nimport { Box, Text, Flex, Button } from '@chakra-ui/react';\nimport { mintNFTContract } from \"../contracts\";\nimport NFT from \"../components/NFT\";\n\nvar Main = function Main(_ref) {\n  var account = _ref.account;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      newImage = _useState2[0],\n      setNewImage = _useState2[1];\n\n  var onClickMint = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response, balanceLength, NFTtokenID, NFTtype;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n\n              if (account) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 3:\n              _context.next = 5;\n              return mintNFTContract.methods.mintNFTtoken().send({\n                from: account\n              });\n\n            case 5:\n              response = _context.sent;\n\n              if (!response.start) {\n                _context.next = 17;\n                break;\n              }\n\n              _context.next = 9;\n              return mintNFTContract.methods.balanceOf(account).call();\n\n            case 9:\n              balanceLength = _context.sent;\n              _context.next = 12;\n              return mintNFTContract.methods.tokenOfOwnerByIndex(account, parseInt(balanceLength) - 1).call();\n\n            case 12:\n              NFTtokenID = _context.sent;\n              _context.next = 15;\n              return mintNFTContract.methods.NFTtypes(NFTtokenID).call();\n\n            case 15:\n              NFTtype = _context.sent;\n              setNewImage(NFTtype);\n\n            case 17:\n              _context.next = 22;\n              break;\n\n            case 19:\n              _context.prev = 19;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(_context.t0);\n\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 19]]);\n    }));\n\n    return function onClickMint() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/React.createElement(Flex, {\n    w: \"full\",\n    h: \"100vh\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    direction: \"column\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, newImage ? /*#__PURE__*/React.createElement(NFT, {\n    NFTtype: newNFTtype,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }\n  }) : /*#__PURE__*/React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }\n  }, \"LET'S MINT NFT!!\")), /*#__PURE__*/React.createElement(Button, {\n    onClick: onClickMint,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, \"MINT\"));\n};\n\nexport default Main;","map":{"version":3,"sources":["C:/kwangwoon/KW/kw_4_1/capstons/capstone_project/frontend/src/routes/main.tsx"],"names":["React","useState","Box","Text","Flex","Button","mintNFTContract","NFT","Main","account","newImage","setNewImage","onClickMint","methods","mintNFTtoken","send","from","response","start","balanceOf","call","balanceLength","tokenOfOwnerByIndex","parseInt","NFTtokenID","NFTtypes","NFTtype","console","error","newNFTtype"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,MAA1B,QAAwC,kBAAxC;AACA,SAASC,eAAT,QAAgC,cAAhC;AACA,OAAOC,GAAP,MAAgB,mBAAhB;;AAMA,IAAMC,IAAmB,GAAG,SAAtBA,IAAsB,OAAe;AAAA,MAAbC,OAAa,QAAbA,OAAa;;AAAA,kBACPR,QAAQ,EADD;AAAA;AAAA,MAChCS,QADgC;AAAA,MACtBC,WADsB;;AAGvC,MAAMC,WAAW;AAAA,yEAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,kBAEPH,OAFO;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,qBAIYH,eAAe,CAACO,OAAhB,CAAwBC,YAAxB,GAAuCC,IAAvC,CAA4C;AAACC,gBAAAA,IAAI,EAACP;AAAN,eAA5C,CAJZ;;AAAA;AAILQ,cAAAA,QAJK;;AAAA,mBAMRA,QAAQ,CAACC,KAND;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAOqBZ,eAAe,CAACO,OAAhB,CAAwBM,SAAxB,CAAkCV,OAAlC,EAA2CW,IAA3C,EAPrB;;AAAA;AAODC,cAAAA,aAPC;AAAA;AAAA,qBASkBf,eAAe,CAACO,OAAhB,CAAwBS,mBAAxB,CAA4Cb,OAA5C,EAAqDc,QAAQ,CAACF,aAAD,CAAR,GAAwB,CAA7E,EAAgFD,IAAhF,EATlB;;AAAA;AASDI,cAAAA,UATC;AAAA;AAAA,qBAWelB,eAAe,CAACO,OAAhB,CAAwBY,QAAxB,CAAiCD,UAAjC,EAA6CJ,IAA7C,EAXf;;AAAA;AAWDM,cAAAA,OAXC;AAaPf,cAAAA,WAAW,CAACe,OAAD,CAAX;;AAbO;AAAA;AAAA;;AAAA;AAAA;AAAA;AAgBXC,cAAAA,OAAO,CAACC,KAAR;;AAhBW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA,oBAAXhB,WAAW;AAAA;AAAA;AAAA,KAAjB;;AAoBA,sBACA,oBAAC,IAAD;AAAM,IAAA,CAAC,EAAC,MAAR;AAAe,IAAA,CAAC,EAAC,OAAjB;AAAyB,IAAA,cAAc,EAAC,QAAxC;AAAiD,IAAA,UAAU,EAAC,QAA5D;AAAqE,IAAA,SAAS,EAAC,QAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKF,QAAQ,gBACL,oBAAC,GAAD;AAAK,IAAA,OAAO,EAAImB,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADK,gBAGL,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAJR,CADJ,eAQI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEjB,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARJ,CADA;AAaF,CApCF;;AAqCA,eAAeJ,IAAf","sourcesContent":["import React, { FC, useState } from \"react\";\r\nimport { Box, Text, Flex, Button } from '@chakra-ui/react';\r\nimport { mintNFTContract } from \"../contracts\";\r\nimport NFT from \"../components/NFT\";\r\n\r\ninterface MainProps{\r\n    account: string;\r\n}\r\n\r\nconst Main: FC<MainProps> = ({account}) => {\r\n    const [newImage, setNewImage] = useState<string>();\r\n\r\n    const onClickMint =async () => {\r\n        try{\r\n            if(!account) return;\r\n\r\n            const response = await mintNFTContract.methods.mintNFTtoken().send({from:account});\r\n            \r\n            if(response.start){\r\n                const balanceLength = await mintNFTContract.methods.balanceOf(account).call();\r\n\r\n                const NFTtokenID = await mintNFTContract.methods.tokenOfOwnerByIndex(account, parseInt(balanceLength)-1).call();\r\n\r\n                const NFTtype = await mintNFTContract.methods.NFTtypes(NFTtokenID).call();\r\n\r\n                setNewImage(NFTtype);\r\n            }\r\n        }catch (error){\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    return (\r\n    <Flex w=\"full\" h=\"100vh\" justifyContent=\"center\" alignItems=\"center\" direction=\"column\">\r\n        <Box>\r\n            {newImage ? (\r\n                <NFT NFTtype = {newNFTtype}/>\r\n            ) : (\r\n                <Text>LET'S MINT NFT!!</Text>\r\n            )}\r\n        </Box>\r\n        <Button onClick={onClickMint} >\r\n        MINT</Button>\r\n    </Flex>\r\n    );\r\n };\r\nexport default Main;"]},"metadata":{},"sourceType":"module"}